@page "/Game"
@using BattleShip.App.Components
@using BattleShip.App.Services
@using BattleShip.Models
@inject LocalGameReplication LocalGameReplication
@inject NavigationManager Navigation

<div>

    <div id="game-header">
        @{
            string status = "";
            string description = "";
            switch (_gameState)
            {
                case GameState.WaitingForPlayers:
                    status = "Waiting for players...";
                    break;
                case GameState.PlacingShips:
                    status = "Place your ships";
                    description = "Click on the grid to place your ships";
                    break;
                case GameState.Playing:
                    status = (_isPlayerTurn) ? "Your turn" : "Enemy's turn";
                    break;
                case GameState.GameOver:
                    status = "Game over";
                    break;
                default: throw new NotImplementedException();
            }
        }
        <p id="game-header-status">@status</p>
        <p id="game-header-status-description">@description</p>
    </div>

    <div id="game-view">

        <div id="player1-view" class="player-view">
            <div class="player-grid">
                <GameGrid
                    Rows="@_gameData.Settings.GridHeight"
                    Columns="@_gameData.Settings.GridWidth"
                    CellClicked="OnCellClickSelf"
                    Data="@_playerGrid"/>
            </div>
            <p class="player-name">Player 1</p>
        </div>

        <div id="vs-graphics">
            <p>VS</p>
        </div>

        <div id="player2-view" class="player-view">
            <div class="player-grid">
                <GameGrid
                    Rows="@_gameData.Settings.GridHeight"
                    Columns="@_gameData.Settings.GridWidth"
                    CellClicked="OnCellClickEnemy"
                    Data="@_opponentGrid"/>
            </div>
            <p class="player-name">Player 2</p>
        </div>

    </div>

</div>

<GameHubConnectionHandler/>

@code {

    private GameData _gameData = null!;

    private GameState _gameState = GameState.WaitingForPlayers;
    private bool _isPlayerTurn = false;

    private GridData _playerGrid = new();
    private GridData _opponentGrid = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (LocalGameReplication.GameData == null)
        {
            Navigation.NavigateTo("/");
            return;
        }

        _gameData = LocalGameReplication.GameData;
        LocalGameReplication.OnStateChanged += OnStateChanged;
        LocalGameReplication.OnGridUpdate += OnGridUpdate;
        LocalGameReplication.OnTurnChanged += OnTurnChanged;
        Console.WriteLine($"Game started: {_gameData.Id} with grid size {_gameData.Settings.GridWidth}x{_gameData.Settings.GridHeight}");
        LocalGameReplication.SendReady();
    }

    private void OnCellClickSelf((int x, int y) parameters)
    {
        var (x, y) = parameters;
        if (_gameState == GameState.PlacingShips)
        {
            Console.WriteLine($"Place ship: {x}, {y}");
        }
    }

    private void OnCellClickEnemy((int x, int y) parameters)
    {
        var (x, y) = parameters;
        
        if (_isPlayerTurn && _gameState == GameState.Playing)
        {
            Console.WriteLine($"Attack: {x}, {y}");
            LocalGameReplication.Attack(new Coordinates(x, y));
        }
    }

    private void OnStateChanged(GameState state)
    {
        _gameState = state;
        Console.WriteLine($"Game state changed: {_gameState}");
        StateHasChanged();
    }

    private void OnGridUpdate(GridData data)
    {
        _playerGrid = LocalGameReplication.PlayerGrid;
        _opponentGrid = LocalGameReplication.OpponentGrid;
        StateHasChanged();
    }

    private void OnTurnChanged(bool isPlayerTurn)
    {
        _isPlayerTurn = isPlayerTurn;
        Console.WriteLine($"Turn changed: {isPlayerTurn}");
        StateHasChanged();
    }

}