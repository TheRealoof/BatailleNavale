@page "/Game"
@using BattleShip.App.Components
@using BattleShip.App.Services
@using BattleShip.Models
@inject LocalGameReplication LocalGameReplication
@inject NavigationManager Navigation

<div>

    <div id="game-header">
        @{
            string status = "";
            string description = "";
            switch (_gameState)
            {
                case GameState.WaitingForPlayers:
                    status = "Waiting for players...";
                    break;
                case GameState.PlacingShips:
                    status = "Place your ships";
                    List<int> remainingSizes = [.._gameData.Settings.ShipLengths];
                    foreach (var ship in _playerGrid.ShipData)
                    {
                        remainingSizes.Remove(ship.Length);
                    }
                    if (remainingSizes.Count == 0)
                    {
                        description = "Waiting for opponent to place ships";
                    }
                    else
                    {
                        description = "Drag on the grid to place your ships (Remaining sizes: " + string.Join(", ", remainingSizes) + ")";
                    }
                    break;
                case GameState.Playing:
                    status = (_isPlayerTurn) ? "Your turn" : "Enemy's turn";
                    break;
                case GameState.GameOver:
                    status = "Game over";
                    break;
                default: throw new NotImplementedException();
            }
        }
        <p id="game-header-status">@status</p>
        <p id="game-header-status-description">@description</p>
    </div>

    <div id="game-view">

        @if (_playerData.IsConnected)
        {
            <div id="player1-view" class="player-view">
                <GameGrid
                    Rows="@_gameData.Settings.GridHeight"
                    Columns="@_gameData.Settings.GridWidth"
                    CellClicked="OnCellClickSelf"
                    Data="@_playerGrid"
                    AllowPlaceShips="@(_gameState == GameState.PlacingShips)"
                    ShipPlacementRequested="OnShipPlacementRequested"/>
                <PlayerDataView Data="@_playerData"/>
            </div>
        }

        @if (_playerData.IsConnected && _opponentData.IsConnected)
        {
            <div id="vs-graphics">
                <p>VS</p>
            </div>
        }

        @if (_opponentData.IsConnected)
        {
            <div id="player2-view" class="player-view">
                <GameGrid
                    Rows="@_gameData.Settings.GridHeight"
                    Columns="@_gameData.Settings.GridWidth"
                    CellClicked="OnCellClickEnemy"
                    Data="@_opponentGrid"
                    AllowPlaceShips="false"/>
                <PlayerDataView Data="@_opponentData"/>
            </div>
        }

    </div>

</div>

<GameHubConnectionHandler/>

@code {

    private GameData _gameData = null!;

    private GameState _gameState = GameState.WaitingForPlayers;
    private bool _isPlayerTurn = false;

    private PlayerData _playerData = new();
    private PlayerData _opponentData = new();
    private GridData _playerGrid = new();
    private GridData _opponentGrid = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (LocalGameReplication.GameData == null)
        {
            Navigation.NavigateTo("/");
            return;
        }

        _gameData = LocalGameReplication.GameData;
        LocalGameReplication.OnStateChanged += OnStateChanged;
        LocalGameReplication.OnPlayerUpdate += OnPlayerUpdate;
        LocalGameReplication.OnGridUpdate += OnGridUpdate;
        LocalGameReplication.OnTurnChanged += OnTurnChanged;
        LocalGameReplication.Refresh();
        LocalGameReplication.SendReady();
    }

    private void OnCellClickSelf((int x, int y) parameters)
    {
        // Unused
    }

    private void OnCellClickEnemy((int x, int y) parameters)
    {
        var (x, y) = parameters;

        if (_isPlayerTurn && _gameState == GameState.Playing)
        {
            LocalGameReplication.Attack(new Coordinates(x, y));
        }
    }
    
    private void OnShipPlacementRequested(ShipData ship)
    {
        LocalGameReplication.PlaceShip(ship);
    }

    private void OnStateChanged(GameState state)
    {
        _gameState = state;
        StateHasChanged();
    }

    private void OnPlayerUpdate(PlayerData data)
    {
        _playerData = LocalGameReplication.PlayerData;
        _opponentData = LocalGameReplication.OpponentData;
        StateHasChanged();
    }

    private void OnGridUpdate(GridData data)
    {
        _playerGrid = LocalGameReplication.PlayerGrid;
        _opponentGrid = LocalGameReplication.OpponentGrid;
        StateHasChanged();
    }

    private void OnTurnChanged(bool isPlayerTurn)
    {
        _isPlayerTurn = isPlayerTurn;
        StateHasChanged();
    }

}