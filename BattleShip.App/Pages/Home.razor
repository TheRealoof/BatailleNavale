@page "/"
@attribute [Authorize]
@using BattleShip.API.Protos
@using Grpc.Core
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Profile = BattleShip.Models.Profile
@inject HttpClient Http
@inject IAccessTokenProvider TokenProvider
@inject BattleshipService.BattleshipServiceClient GrpcClient

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<div>
    @if (_profile != null)
    {
        <p>Username: @_profile.UserName</p>
        <img src="@_profile.Picture" alt=""/>
    }
    else
    {
        <p>Loading profile...</p>
    }
</div>

@code {
    private Profile? _profile;
    private string? _token;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _token = await GetAccessToken();
        await RequestProfileGrpc();
    }

    private async Task RequestProfileHttp()
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "profile");
            request.Headers.Add("Authorization", $"Bearer {_token}");
            var response = await Http.SendAsync(request);
            if (!response.IsSuccessStatusCode)
                return;
            _profile = await response.Content.ReadFromJsonAsync<Profile>();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task RequestProfileGrpc()
    {
        try
        {
            // pass token in service call
            var headers = new Metadata { { "Authorization", $"Bearer {_token}" } };
            var grpcProfile = await GrpcClient.GetProfileAsync(new Empty(), headers);
            _profile = new Profile
            {
                UserName = grpcProfile.Username,
                Picture = grpcProfile.Picture
            };
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task<string?> GetAccessToken()
    {
        var tokenResult = await TokenProvider.RequestAccessToken();
        return tokenResult.TryGetToken(out var token) ? token.Value : null;
    }

}