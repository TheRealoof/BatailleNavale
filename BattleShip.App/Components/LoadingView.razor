@inject NavigationManager Navigation

<BackgroundImage Blur="5" Hue="20"/>

<div id="loading-screen-page">

    <div id="loading-screen-div">

        @switch (State)
        {
            case LoadingState.NeedsLogin:
            {
                <p class="loading-screen-text">YOU NEED TO LOGIN TO PLAY</p>
                <button class="loading-screen-button" @onclick="OnLoginClicked">LOGIN</button>
                break;
            }
            case LoadingState.LoggingIn:
            {
                <img id="loading-screen-icon" src="images/ui/loading-icon.gif" alt=""/>
                <p class="loading-screen-text">LOGGING IN...</p>
                break;
            }
            case LoadingState.Connecting:
            {
                <img id="loading-screen-icon" src="images/ui/loading-icon.gif" alt=""/>
                <p class="loading-screen-text">CONNECTING TO GAME SERVER...</p>
                break;
            }
            case LoadingState.Failed:
            {
                <p class="loading-screen-error">FAILED TO CONNECT TO GAME SERVER</p>
                break;
            }
            default:
                throw new ArgumentOutOfRangeException();
        }

    </div>
</div>

@code {

    [Parameter] public LoadingState State { get; set; }

    public enum LoadingState
    {
        NeedsLogin,
        LoggingIn,
        Connecting,
        Failed
    }

    private void OnLoginClicked()
    {
        Navigation.NavigateTo("authentication/login");
    }

}