@page "/Menu"

@attribute [Authorize]

@using BattleShip.API.Protos
@using Grpc.Core
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Profile = BattleShip.Models.Profile
@using BattleShip.App.Components
@inject HttpClient Http
@inject IAccessTokenProvider TokenProvider
@inject BattleshipService.BattleshipServiceClient GrpcClient

<BackgroundImage/>

<div>
    <p>@(_profile?.UserName ?? "...")</p>
    <img src="@(_profile?.Picture ?? "")" alt="Profile picture"/>
</div>

<div>
    <h1>Battleship</h1>
    <p>Welcome to Battleship!</p>
    <div>
        <button>Play</button>
    </div>
</div>

<GameHubConnexionHandler/>


@code {
    
    private Profile? _profile;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await RequestProfileGrpc();
    }
    
    private async Task RequestProfileHttp()
    {
        try
        {
            var token = await GetAccessToken();
            var request = new HttpRequestMessage(HttpMethod.Get, "profile");
            request.Headers.Add("Authorization", $"Bearer {token}");
            var response = await Http.SendAsync(request);
            if (!response.IsSuccessStatusCode)
                return;
            _profile = await response.Content.ReadFromJsonAsync<Profile>();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task RequestProfileGrpc()
    {
        try
        {
            var token = await GetAccessToken();
            var headers = new Metadata { { "Authorization", $"Bearer {token}" } };
            var grpcProfile = await GrpcClient.GetProfileAsync(new Empty(), headers);
            _profile = new Profile
            {
                UserName = grpcProfile.Username,
                Picture = grpcProfile.Picture
            };
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task<string> GetAccessToken()
    {
        var tokenResult = await TokenProvider.RequestAccessToken();
        tokenResult.TryGetToken(out var token);
        return token!.Value;
    }

}